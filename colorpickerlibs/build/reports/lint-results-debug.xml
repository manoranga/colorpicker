<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.1.2">

    <issue
        id="CustomViewStyleable"
        severity="Warning"
        message="By convention, the custom view (`RingColorPickerOuterCircle`) and the declare-styleable (`RingColorPicker`) should have the same name (various editor features rely on this convention)"
        category="Correctness"
        priority="6"
        summary="Mismatched Styleable/Custom View Name"
        explanation="The convention for custom views is to use a `declare-styleable` whose name matches the custom view class name. The IDE relies on this convention such that for example code completion can be offered for attributes in a custom view in layout XML resource files.&#xA;&#xA;(Similarly, layout parameter classes should use the suffix `_Layout`.)"
        errorLine1="        TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.RingColorPicker);"
        errorLine2="                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/ringcolorpicker/RingColorPickerOuterCircle.java"
            line="72"
            column="67"/>
    </issue>

    <issue
        id="CutPasteId"
        severity="Warning"
        message="The id `R.id.rvItemContainer` has already been looked up in this method; possible cut &amp; paste error?"
        category="Correctness"
        priority="6"
        summary="Likely cut &amp; paste mistakes"
        explanation="This lint check looks for cases where you have cut &amp; pasted calls to `findViewById` but have forgotten to update the R.id field. It&apos;s possible that your code is simply (redundantly) looking up the field repeatedly, but lint cannot distinguish that from a case where you for example want to initialize fields `prev` and `next` and you cut &amp; pasted `findViewById(R.id.prev)` and forgot to update the second initialization to `R.id.next`."
        errorLine1="            LinearLayout layout = (LinearLayout) itemView.findViewById(R.id.rvItemContainer);"
        errorLine2="                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/adapters/CPListRecyclerAdapter.java"
            line="301"
            column="50"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/adapters/CPListRecyclerAdapter.java"
            line="276"
            column="31"
            message="First usage here"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousHValue = String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="592"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueH.setText(String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="593"
            column="46"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousSValue = String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="595"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueS.setText(String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="596"
            column="46"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousLValue = String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="598"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueL.setText(String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="599"
            column="46"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousHValue = String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="621"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueH.setText(String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="622"
            column="46"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousSValue = String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="624"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueS.setText(String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="625"
            column="46"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousLValue = String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="627"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueL.setText(String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="628"
            column="46"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousHValue = String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="650"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueH.setText(String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="651"
            column="46"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousSValue = String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="653"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueS.setText(String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="654"
            column="46"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousLValue = String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="656"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueL.setText(String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="657"
            column="46"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        previousHValue = String.format(&quot;%.1f&quot;, hsvH) + &quot;&apos;&quot;;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="701"
            column="26"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        binding.tvValueH.setText(String.format(&quot;%.1f&quot;, hsvH) + &quot;&apos;&quot;);"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="702"
            column="34"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        previousSValue = String.format(&quot;%.1f&quot;, hsvS) + &quot;%&quot;;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="704"
            column="26"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        binding.tvValueS.setText(String.format(&quot;%.1f&quot;, hsvS) + &quot;%&quot;);"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="705"
            column="34"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        previousLValue = String.format(&quot;%.1f&quot;, hsvL) + &quot;%&quot;;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="707"
            column="26"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        binding.tvValueL.setText(String.format(&quot;%.1f&quot;, hsvL) + &quot;%&quot;);"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="708"
            column="34"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousHValue = String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="618"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueHMinimized.setText(String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="619"
            column="55"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousSValue = String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="621"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueSMinimized.setText(String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="622"
            column="55"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousLValue = String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="624"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueLMinimized.setText(String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="625"
            column="55"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousHValue = String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="647"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueHMinimized.setText(String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="648"
            column="55"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousSValue = String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="650"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueSMinimized.setText(String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="651"
            column="55"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousLValue = String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="653"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueLMinimized.setText(String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="654"
            column="55"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousHValue = String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="676"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueHMinimized.setText(String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="677"
            column="55"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousSValue = String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="679"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueSMinimized.setText(String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="680"
            column="55"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    previousLValue = String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;;"
        errorLine2="                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="682"
            column="38"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                    binding.tvValueLMinimized.setText(String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="683"
            column="55"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        previousHValue = String.format(&quot;%.1f&quot;, hsvH) + &quot;&apos;&quot;;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="727"
            column="26"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        binding.tvValueHMinimized.setText(String.format(&quot;%.1f&quot;, hsvH) + &quot;&apos;&quot;);"
        errorLine2="                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="728"
            column="43"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        previousSValue = String.format(&quot;%.1f&quot;, hsvS) + &quot;%&quot;;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="730"
            column="26"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        binding.tvValueSMinimized.setText(String.format(&quot;%.1f&quot;, hsvS) + &quot;%&quot;);"
        errorLine2="                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="731"
            column="43"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        previousLValue = String.format(&quot;%.1f&quot;, hsvL) + &quot;%&quot;;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="733"
            column="26"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `String.format(Locale, ...)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="https://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        binding.tvValueLMinimized.setText(String.format(&quot;%.1f&quot;, hsvL) + &quot;%&quot;);"
        errorLine2="                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="734"
            column="43"/>
    </issue>

    <issue
        id="DuplicateIncludedIds"
        severity="Warning"
        message="Duplicate id @+id/colorPaletteRecyclerView, defined or included multiple times in layout/color_picker_tab_view.xml: [layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/colorPaletteRecyclerView, layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/colorPaletteRecyclerView, layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/colorPaletteRecyclerView]"
        category="Correctness"
        priority="6"
        summary="Duplicate ids across layouts combined with include tags"
        explanation="It&apos;s okay for two independent layouts to use the same ids. However, if layouts are combined with include tags, then the id&apos;s need to be unique within any chain of included layouts, or `Activity#findViewById()` can return an unexpected view."
        errorLine1="            &lt;include"
        errorLine2="            ^">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_picker_tab_view.xml"
            line="125"
            column="13"
            message="Duplicate id @+id/colorPaletteRecyclerView, defined or included multiple times in layout/color_picker_tab_view.xml: [layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/colorPaletteRecyclerView, layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/colorPaletteRecyclerView, layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/colorPaletteRecyclerView]"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/ring_color_picker_view.xml"
            line="63"
            column="21"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/colorPaletteRecyclerView"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/linear_color_picker_view.xml"
            line="63"
            column="21"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/colorPaletteRecyclerView"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/square_color_picker_view.xml"
            line="63"
            column="21"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/colorPaletteRecyclerView"/>
    </issue>

    <issue
        id="DuplicateIncludedIds"
        severity="Warning"
        message="Duplicate id @+id/recentColorsView, defined or included multiple times in layout/color_picker_tab_view.xml: [layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/recentColorsView, layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/recentColorsView, layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/recentColorsView]"
        category="Correctness"
        priority="6"
        summary="Duplicate ids across layouts combined with include tags"
        explanation="It&apos;s okay for two independent layouts to use the same ids. However, if layouts are combined with include tags, then the id&apos;s need to be unique within any chain of included layouts, or `Activity#findViewById()` can return an unexpected view."
        errorLine1="            &lt;include"
        errorLine2="            ^">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_picker_tab_view.xml"
            line="125"
            column="13"
            message="Duplicate id @+id/recentColorsView, defined or included multiple times in layout/color_picker_tab_view.xml: [layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/recentColorsView, layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/recentColorsView, layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/recentColorsView]"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/ring_color_picker_view.xml"
            line="35"
            column="13"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/recentColorsView"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/linear_color_picker_view.xml"
            line="35"
            column="13"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/recentColorsView"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/square_color_picker_view.xml"
            line="35"
            column="13"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/recentColorsView"/>
    </issue>

    <issue
        id="DuplicateIncludedIds"
        severity="Warning"
        message="Duplicate id @+id/tvColorTitle, defined or included multiple times in layout/color_picker_tab_view.xml: [layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/tvColorTitle, layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/tvColorTitle, layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/tvColorTitle]"
        category="Correctness"
        priority="6"
        summary="Duplicate ids across layouts combined with include tags"
        explanation="It&apos;s okay for two independent layouts to use the same ids. However, if layouts are combined with include tags, then the id&apos;s need to be unique within any chain of included layouts, or `Activity#findViewById()` can return an unexpected view."
        errorLine1="            &lt;include"
        errorLine2="            ^">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_picker_tab_view.xml"
            line="125"
            column="13"
            message="Duplicate id @+id/tvColorTitle, defined or included multiple times in layout/color_picker_tab_view.xml: [layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/tvColorTitle, layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/tvColorTitle, layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/tvColorTitle]"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/ring_color_picker_view.xml"
            line="43"
            column="17"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/tvColorTitle"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/linear_color_picker_view.xml"
            line="43"
            column="17"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/tvColorTitle"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/square_color_picker_view.xml"
            line="43"
            column="17"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/tvColorTitle"/>
    </issue>

    <issue
        id="DuplicateIncludedIds"
        severity="Warning"
        message="Duplicate id @+id/colorPaletteRecyclerView, defined or included multiple times in layout/color_picker_tab_view.xml: [layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/colorPaletteRecyclerView, layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/colorPaletteRecyclerView, layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/colorPaletteRecyclerView]"
        category="Correctness"
        priority="6"
        summary="Duplicate ids across layouts combined with include tags"
        explanation="It&apos;s okay for two independent layouts to use the same ids. However, if layouts are combined with include tags, then the id&apos;s need to be unique within any chain of included layouts, or `Activity#findViewById()` can return an unexpected view."
        errorLine1="            &lt;include"
        errorLine2="            ^">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_picker_tab_view.xml"
            line="136"
            column="13"
            message="Duplicate id @+id/colorPaletteRecyclerView, defined or included multiple times in layout/color_picker_tab_view.xml: [layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/colorPaletteRecyclerView, layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/colorPaletteRecyclerView, layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/colorPaletteRecyclerView]"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/ring_color_picker_view.xml"
            line="63"
            column="21"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/colorPaletteRecyclerView"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/linear_color_picker_view.xml"
            line="63"
            column="21"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/colorPaletteRecyclerView"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/square_color_picker_view.xml"
            line="63"
            column="21"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/colorPaletteRecyclerView"/>
    </issue>

    <issue
        id="DuplicateIncludedIds"
        severity="Warning"
        message="Duplicate id @+id/recentColorsView, defined or included multiple times in layout/color_picker_tab_view.xml: [layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/recentColorsView, layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/recentColorsView, layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/recentColorsView]"
        category="Correctness"
        priority="6"
        summary="Duplicate ids across layouts combined with include tags"
        explanation="It&apos;s okay for two independent layouts to use the same ids. However, if layouts are combined with include tags, then the id&apos;s need to be unique within any chain of included layouts, or `Activity#findViewById()` can return an unexpected view."
        errorLine1="            &lt;include"
        errorLine2="            ^">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_picker_tab_view.xml"
            line="136"
            column="13"
            message="Duplicate id @+id/recentColorsView, defined or included multiple times in layout/color_picker_tab_view.xml: [layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/recentColorsView, layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/recentColorsView, layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/recentColorsView]"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/ring_color_picker_view.xml"
            line="35"
            column="13"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/recentColorsView"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/linear_color_picker_view.xml"
            line="35"
            column="13"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/recentColorsView"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/square_color_picker_view.xml"
            line="35"
            column="13"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/recentColorsView"/>
    </issue>

    <issue
        id="DuplicateIncludedIds"
        severity="Warning"
        message="Duplicate id @+id/tvColorTitle, defined or included multiple times in layout/color_picker_tab_view.xml: [layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/tvColorTitle, layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/tvColorTitle, layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/tvColorTitle]"
        category="Correctness"
        priority="6"
        summary="Duplicate ids across layouts combined with include tags"
        explanation="It&apos;s okay for two independent layouts to use the same ids. However, if layouts are combined with include tags, then the id&apos;s need to be unique within any chain of included layouts, or `Activity#findViewById()` can return an unexpected view."
        errorLine1="            &lt;include"
        errorLine2="            ^">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_picker_tab_view.xml"
            line="136"
            column="13"
            message="Duplicate id @+id/tvColorTitle, defined or included multiple times in layout/color_picker_tab_view.xml: [layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/tvColorTitle, layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/tvColorTitle, layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/tvColorTitle]"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/ring_color_picker_view.xml"
            line="43"
            column="17"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/ring_color_picker_view.xml defines @+id/tvColorTitle"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/linear_color_picker_view.xml"
            line="43"
            column="17"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/linear_color_picker_view.xml defines @+id/tvColorTitle"/>
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/square_color_picker_view.xml"
            line="43"
            column="17"
            message="Defined here, included via layout/color_picker_tab_view.xml => layout/square_color_picker_view.xml defines @+id/tvColorTitle"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.databinding:databinding-runtime than 4.1.3 is available: 8.6.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation (&quot;androidx.databinding:databinding-runtime:4.1.3&quot;)"
        errorLine2="                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/build.gradle.kts"
            line="45"
            column="22"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.&#xA;&#xA;There **are** cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="https://developer.android.com/training/multiscreen/screendensities.html"
        urls="https://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                                android:textSize=&quot;16dp&quot;>"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="58"
            column="33"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.&#xA;&#xA;There **are** cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="https://developer.android.com/training/multiscreen/screendensities.html"
        urls="https://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                                android:textSize=&quot;16dp&quot;>"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="89"
            column="33"/>
    </issue>

    <issue
        id="UseCompatLoadingForDrawables"
        severity="Warning"
        message="Use `AppCompatResources.getDrawable()`"
        category="Correctness"
        priority="1"
        summary="Should not call `Context.getDrawable` or `Resources.getDrawable` directly"
        explanation="Use Compat loading of drawables"
        errorLine1="            binding.btnHSBMinimized.setBackground(context.getDrawable(R.drawable.all_round_conner_background_color_picker_white_5dp));"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="290"
            column="51"/>
    </issue>

    <issue
        id="UseCompatLoadingForDrawables"
        severity="Warning"
        message="Use `AppCompatResources.getDrawable()`"
        category="Correctness"
        priority="1"
        summary="Should not call `Context.getDrawable` or `Resources.getDrawable` directly"
        explanation="Use Compat loading of drawables"
        errorLine1="            binding.btnRGBMinimized.setBackground(context.getDrawable(R.drawable.all_round_conner_background_color_picker));"
        errorLine2="                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="291"
            column="51"/>
    </issue>

    <issue
        id="UseCompatLoadingForDrawables"
        severity="Warning"
        message="Use `AppCompatResources.getDrawable()`"
        category="Correctness"
        priority="1"
        summary="Should not call `Context.getDrawable` or `Resources.getDrawable` directly"
        explanation="Use Compat loading of drawables"
        errorLine1="                binding.btnHSBMinimized.setBackground(context.getDrawable(R.drawable.all_round_conner_background_color_picker_white_5dp));"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="307"
            column="55"/>
    </issue>

    <issue
        id="UseCompatLoadingForDrawables"
        severity="Warning"
        message="Use `AppCompatResources.getDrawable()`"
        category="Correctness"
        priority="1"
        summary="Should not call `Context.getDrawable` or `Resources.getDrawable` directly"
        explanation="Use Compat loading of drawables"
        errorLine1="                binding.btnRGBMinimized.setBackground(context.getDrawable(R.drawable.all_round_conner_background_color_picker_5dp));"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="308"
            column="55"/>
    </issue>

    <issue
        id="UseCompatLoadingForDrawables"
        severity="Warning"
        message="Use `AppCompatResources.getDrawable()`"
        category="Correctness"
        priority="1"
        summary="Should not call `Context.getDrawable` or `Resources.getDrawable` directly"
        explanation="Use Compat loading of drawables"
        errorLine1="                binding.btnRGBMinimized.setBackground(context.getDrawable(R.drawable.all_round_conner_background_color_picker_white_5dp));"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="316"
            column="55"/>
    </issue>

    <issue
        id="UseCompatLoadingForDrawables"
        severity="Warning"
        message="Use `AppCompatResources.getDrawable()`"
        category="Correctness"
        priority="1"
        summary="Should not call `Context.getDrawable` or `Resources.getDrawable` directly"
        explanation="Use Compat loading of drawables"
        errorLine1="                binding.btnHSBMinimized.setBackground(context.getDrawable(R.drawable.all_round_conner_background_color_picker_5dp));"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="317"
            column="55"/>
    </issue>

    <issue
        id="Typos"
        severity="Warning"
        message="&quot;Ok&quot; is usually capitalized as &quot;OK&quot;"
        category="Correctness:Messages"
        priority="7"
        summary="Spelling error"
        explanation="This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged."
        errorLine1="    &lt;string name=&quot;OK&quot;>Ok&lt;/string>"
        errorLine2="                      ^">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/values/strings.xml"
            line="23"
            column="23"/>
    </issue>

    <issue
        id="HardwareIds"
        severity="Warning"
        message="Using `getString` to get device identifiers is not recommended"
        category="Security"
        priority="6"
        summary="Hardware Id Usage"
        explanation="Using these device identifiers is not recommended other than for high value fraud prevention and advanced telephony use-cases. For advertising use-cases, use `AdvertisingIdClient$Info#getId` and for analytics, use `InstanceId#getId`."
        url="https://developer.android.com/training/articles/user-data-ids.html"
        urls="https://developer.android.com/training/articles/user-data-ids.html"
        errorLine1="  return Secure"
        errorLine2="         ^">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/common/MyDevice.java"
            line="192"
            column="10"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="        Paint paint2 = new Paint();"
        errorLine2="                       ~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/ringcolorpicker/RingColorPickerOuterCircle.java"
            line="112"
            column="24"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="        paint2 = new Paint(Paint.ANTI_ALIAS_FLAG);"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/ringcolorpicker/RingColorPickerOuterCircle.java"
            line="113"
            column="18"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="        float[] corners = new float[]{"
        errorLine2="                          ^">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/ringcolorpicker/RingColorPickerOuterCircle.java"
            line="120"
            column="27"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="        final Path path = new Path();"
        errorLine2="                          ~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/ringcolorpicker/RingColorPickerOuterCircle.java"
            line="127"
            column="27"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="        Paint paint2 = new Paint();"
        errorLine2="                       ~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/squarecolorpikcer/SquareColorPicker.java"
            line="58"
            column="24"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="        paint2 = new Paint(Paint.ANTI_ALIAS_FLAG);"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/squarecolorpikcer/SquareColorPicker.java"
            line="59"
            column="18"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="        Shader dalam = new LinearGradient(0.f, 0.f, this.getMeasuredWidth(), 0.f, 0xffffffff, rgb, Shader.TileMode.CLAMP);"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/squarecolorpikcer/SquareColorPicker.java"
            line="69"
            column="24"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="        ComposeShader shader = new ComposeShader(squarPickerShader, dalam, PorterDuff.Mode.MULTIPLY);"
        errorLine2="                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/squarecolorpikcer/SquareColorPicker.java"
            line="70"
            column="32"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="        bitmap2 = Bitmap.createScaledBitmap(bitmap2, this.getMeasuredWidth(), this.getMeasuredHeight(), true);"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/squarecolorpikcer/SquareColorPicker.java"
            line="75"
            column="19"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="        Canvas canvas2 = new Canvas(bitmap2);"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/squarecolorpikcer/SquareColorPicker.java"
            line="77"
            column="26"/>
    </issue>

    <issue
        id="DrawAllocation"
        severity="Warning"
        message="Avoid object allocations during draw/layout operations (preallocate and reuse instead)"
        category="Performance"
        priority="9"
        summary="Memory allocations within drawing code"
        explanation="You should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.&#xA;&#xA;The way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.&#xA;&#xA;Some methods allocate memory on your behalf (such as `Bitmap.create`), and these should be handled in the same way."
        errorLine1="            Paint paint3 = new Paint();"
        errorLine2="                           ~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/squarecolorpikcer/SquareColorPicker.java"
            line="88"
            column="28"/>
    </issue>

    <issue
        id="NotifyDataSetChanged"
        severity="Warning"
        message="It will always be more efficient to use more specific change events if you can. Rely on `notifyDataSetChanged` as a last resort."
        category="Performance"
        priority="8"
        summary="Invalidating All RecyclerView Data"
        explanation="The `RecyclerView` adapter&apos;s `onNotifyDataSetChanged` method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views."
        errorLine1="        notifyDataSetChanged();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/adapters/CPListRecyclerAdapter.java"
            line="73"
            column="9"/>
    </issue>

    <issue
        id="NotifyDataSetChanged"
        severity="Warning"
        message="It will always be more efficient to use more specific change events if you can. Rely on `notifyDataSetChanged` as a last resort."
        category="Performance"
        priority="8"
        summary="Invalidating All RecyclerView Data"
        explanation="The `RecyclerView` adapter&apos;s `onNotifyDataSetChanged` method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views."
        errorLine1="        notifyDataSetChanged();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/adapters/CPListRecyclerAdapter.java"
            line="79"
            column="9"/>
    </issue>

    <issue
        id="NotifyDataSetChanged"
        severity="Warning"
        message="It will always be more efficient to use more specific change events if you can. Rely on `notifyDataSetChanged` as a last resort."
        category="Performance"
        priority="8"
        summary="Invalidating All RecyclerView Data"
        explanation="The `RecyclerView` adapter&apos;s `onNotifyDataSetChanged` method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views."
        errorLine1="                    notifyDataSetChanged();"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/adapters/CPListRecyclerAdapter.java"
            line="116"
            column="21"/>
    </issue>

    <issue
        id="NotifyDataSetChanged"
        severity="Warning"
        message="It will always be more efficient to use more specific change events if you can. Rely on `notifyDataSetChanged` as a last resort."
        category="Performance"
        priority="8"
        summary="Invalidating All RecyclerView Data"
        explanation="The `RecyclerView` adapter&apos;s `onNotifyDataSetChanged` method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views."
        errorLine1="                        notifyDataSetChanged();"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/adapters/CPListRecyclerAdapter.java"
            line="130"
            column="25"/>
    </issue>

    <issue
        id="NotifyDataSetChanged"
        severity="Warning"
        message="It will always be more efficient to use more specific change events if you can. Rely on `notifyDataSetChanged` as a last resort."
        category="Performance"
        priority="8"
        summary="Invalidating All RecyclerView Data"
        explanation="The `RecyclerView` adapter&apos;s `onNotifyDataSetChanged` method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views."
        errorLine1="                    notifyDataSetChanged();"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/adapters/CPListRecyclerAdapter.java"
            line="143"
            column="21"/>
    </issue>

    <issue
        id="NotifyDataSetChanged"
        severity="Warning"
        message="It will always be more efficient to use more specific change events if you can. Rely on `notifyDataSetChanged` as a last resort."
        category="Performance"
        priority="8"
        summary="Invalidating All RecyclerView Data"
        explanation="The `RecyclerView` adapter&apos;s `onNotifyDataSetChanged` method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views."
        errorLine1="                    notifyDataSetChanged();"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/adapters/CPListRecyclerAdapter.java"
            line="205"
            column="21"/>
    </issue>

    <issue
        id="NotifyDataSetChanged"
        severity="Warning"
        message="It will always be more efficient to use more specific change events if you can. Rely on `notifyDataSetChanged` as a last resort."
        category="Performance"
        priority="8"
        summary="Invalidating All RecyclerView Data"
        explanation="The `RecyclerView` adapter&apos;s `onNotifyDataSetChanged` method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views."
        errorLine1="                notifyDataSetChanged();"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/adapters/CPListRecyclerAdapter.java"
            line="344"
            column="17"/>
    </issue>

    <issue
        id="NotifyDataSetChanged"
        severity="Warning"
        message="It will always be more efficient to use more specific change events if you can. Rely on `notifyDataSetChanged` as a last resort."
        category="Performance"
        priority="8"
        summary="Invalidating All RecyclerView Data"
        explanation="The `RecyclerView` adapter&apos;s `onNotifyDataSetChanged` method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views."
        errorLine1="        notifyDataSetChanged();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/adapters/CPListRecyclerAdapter.java"
            line="373"
            column="9"/>
    </issue>

    <issue
        id="NotifyDataSetChanged"
        severity="Warning"
        message="It will always be more efficient to use more specific change events if you can. Rely on `notifyDataSetChanged` as a last resort."
        category="Performance"
        priority="8"
        summary="Invalidating All RecyclerView Data"
        explanation="The `RecyclerView` adapter&apos;s `onNotifyDataSetChanged` method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views."
        errorLine1="        notifyDataSetChanged();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/adapters/CPListRecyclerAdapter.java"
            line="379"
            column="9"/>
    </issue>

    <issue
        id="NotifyDataSetChanged"
        severity="Warning"
        message="It will always be more efficient to use more specific change events if you can. Rely on `notifyDataSetChanged` as a last resort."
        category="Performance"
        priority="8"
        summary="Invalidating All RecyclerView Data"
        explanation="The `RecyclerView` adapter&apos;s `onNotifyDataSetChanged` method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views."
        errorLine1="        notifyDataSetChanged();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/adapters/CPRecyclerAdapter.java"
            line="54"
            column="9"/>
    </issue>

    <issue
        id="NotifyDataSetChanged"
        severity="Warning"
        message="It will always be more efficient to use more specific change events if you can. Rely on `notifyDataSetChanged` as a last resort."
        category="Performance"
        priority="8"
        summary="Invalidating All RecyclerView Data"
        explanation="The `RecyclerView` adapter&apos;s `onNotifyDataSetChanged` method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views."
        errorLine1="                        cpRecyclerAdapter.notifyDataSetChanged();"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/defaultpallets/DefaultPalletsView.java"
            line="103"
            column="25"/>
    </issue>

    <issue
        id="NotifyDataSetChanged"
        severity="Warning"
        message="It will always be more efficient to use more specific change events if you can. Rely on `notifyDataSetChanged` as a last resort."
        category="Performance"
        priority="8"
        summary="Invalidating All RecyclerView Data"
        explanation="The `RecyclerView` adapter&apos;s `onNotifyDataSetChanged` method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views."
        errorLine1="                    cpListRecyclerAdapterTab.notifyDataSetChanged();"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/defaultpallets/DefaultPalletsView.java"
            line="158"
            column="21"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 24"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="  if (Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT_WATCH) {"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/common/MyDevice.java"
            line="276"
            column="7"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `CPManager` which has field `context` pointing to `Context`); this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static CPManager instance;"
        errorLine2="            ~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/managers/CPManager.java"
            line="17"
            column="13"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a `LinearLayout` is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="            &lt;LinearLayout"
        errorLine2="             ~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_picker_tab_view.xml"
            line="76"
            column="14"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a `LinearLayout` is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="    &lt;LinearLayout"
        errorLine2="     ~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_picker_tab_view.xml"
            line="153"
            column="6"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a `LinearLayout` is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="                &lt;LinearLayout"
        errorLine2="                 ~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/dialog_alert.xml"
            line="68"
            column="18"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a `LinearLayout` is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="                    &lt;LinearLayout"
        errorLine2="                     ~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="35"
            column="22"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Nested layout weights"
        explanation="Layout weights require a widget to be measured twice. When a `LinearLayout` with non-zero weights is nested inside another `LinearLayout` with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                            android:layout_weight=&quot;1&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="78"
            column="29"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Nested layout weights"
        explanation="Layout weights require a widget to be measured twice. When a `LinearLayout` with non-zero weights is nested inside another `LinearLayout` with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                            android:layout_weight=&quot;1&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="134"
            column="29"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Nested layout weights"
        explanation="Layout weights require a widget to be measured twice. When a `LinearLayout` with non-zero weights is nested inside another `LinearLayout` with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                            android:layout_weight=&quot;1&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="186"
            column="29"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Nested layout weights"
        explanation="Layout weights require a widget to be measured twice. When a `LinearLayout` with non-zero weights is nested inside another `LinearLayout` with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                            android:layout_weight=&quot;8&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="238"
            column="29"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Nested layout weights"
        explanation="Layout weights require a widget to be measured twice. When a `LinearLayout` with non-zero weights is nested inside another `LinearLayout` with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                            android:layout_weight=&quot;1&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="290"
            column="29"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Nested layout weights"
        explanation="Layout weights require a widget to be measured twice. When a `LinearLayout` with non-zero weights is nested inside another `LinearLayout` with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                            android:layout_weight=&quot;1&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="342"
            column="29"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Nested layout weights"
        explanation="Layout weights require a widget to be measured twice. When a `LinearLayout` with non-zero weights is nested inside another `LinearLayout` with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                    android:layout_weight=&quot;1&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="115"
            column="21"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Nested layout weights"
        explanation="Layout weights require a widget to be measured twice. When a `LinearLayout` with non-zero weights is nested inside another `LinearLayout` with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                        android:layout_weight=&quot;1&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="133"
            column="25"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Nested layout weights"
        explanation="Layout weights require a widget to be measured twice. When a `LinearLayout` with non-zero weights is nested inside another `LinearLayout` with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                    android:layout_weight=&quot;1&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="282"
            column="21"/>
    </issue>

    <issue
        id="NestedWeights"
        severity="Warning"
        message="Nested weights are bad for performance"
        category="Performance"
        priority="3"
        summary="Nested layout weights"
        explanation="Layout weights require a widget to be measured twice. When a `LinearLayout` with non-zero weights is nested inside another `LinearLayout` with non-zero weights, then the number of measurements increase exponentially."
        errorLine1="                        android:layout_weight=&quot;8&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="300"
            column="25"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `RelativeLayout` layout or its `FrameLayout` parent is unnecessary"
        category="Performance"
        priority="2"
        summary="Unnecessary parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="    &lt;RelativeLayout"
        errorLine2="     ~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_pallete_hsl_view.xml"
            line="11"
            column="6"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `LinearLayout` layout or its `FrameLayout` parent is unnecessary"
        category="Performance"
        priority="2"
        summary="Unnecessary parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="    &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="     ~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_pallete_squre_view.xml"
            line="11"
            column="6"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `LinearLayout` layout or its `LinearLayout` parent is possibly unnecessary"
        category="Performance"
        priority="2"
        summary="Unnecessary parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="                &lt;LinearLayout"
        errorLine2="                 ~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="47"
            column="18"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `FrameLayout` layout or its `FrameLayout` parent is possibly unnecessary"
        category="Performance"
        priority="2"
        summary="Unnecessary parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="    &lt;FrameLayout"
        errorLine2="     ~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="7"
            column="6"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `LinearLayout` layout or its `FrameLayout` parent is possibly unnecessary"
        category="Performance"
        priority="2"
        summary="Unnecessary parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="        &lt;LinearLayout"
        errorLine2="         ~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="14"
            column="10"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `RelativeLayout` layout or its `LinearLayout` parent is possibly unnecessary"
        category="Performance"
        priority="2"
        summary="Unnecessary parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="                &lt;RelativeLayout"
        errorLine2="                 ~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="436"
            column="18"/>
    </issue>

    <issue
        id="RedundantNamespace"
        severity="Warning"
        message="This namespace declaration is redundant"
        category="Performance"
        priority="1"
        summary="Redundant namespace"
        explanation="In Android XML documents, only specify the namespace on the root/document element. Namespace declarations elsewhere in the document are typically accidental leftovers from copy/pasting XML from other files or documentation."
        errorLine1="    &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_pallete_squre_view.xml"
            line="11"
            column="19"/>
    </issue>

    <issue
        id="UnusedNamespace"
        severity="Warning"
        message="Unused namespace declaration xmlns:android; already declared on the root element"
        category="Performance"
        priority="1"
        summary="Unused namespace"
        explanation="Unused namespace declarations take up space and require processing that is not necessary"
        errorLine1="    &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_pallete_squre_view.xml"
            line="11"
            column="19"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/img_2.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="https://developer.android.com/guide/practices/screens_support.html"
        urls="https://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/drawable/img_2.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/img_3.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon **really** is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="https://developer.android.com/guide/practices/screens_support.html"
        urls="https://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/drawable/img_3.png"/>
    </issue>

    <issue
        id="ButtonCase"
        severity="Warning"
        message="The standard Android way to capitalize Ok is &quot;OK&quot; (tip: use `@android:string/ok` instead)"
        category="Usability"
        priority="2"
        summary="Cancel/OK dialog button capitalization"
        explanation="The standard capitalization for OK/Cancel dialogs is &quot;OK&quot; and &quot;Cancel&quot;. To ensure that your dialogs use the standard strings, you can use the resource strings @android:string/ok and @android:string/cancel."
        errorLine1="    &lt;string name=&quot;OK&quot;>Ok&lt;/string>"
        errorLine2="                      ~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/values/strings.xml"
            line="23"
            column="23"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view `ColorPickRing` overrides `onTouchEvent` but not `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouchEvent(MotionEvent event) {"
        errorLine2="                   ~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/ringcolorpicker/ColorPickRing.java"
            line="111"
            column="20"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view ``DoubleClickEditText`` has `setOnTouchListener` called on it but does not override `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        this.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/common/DoubleClickEditText.java"
            line="52"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view ``DoubleClickEditText`` has `setOnTouchListener` called on it but does not override `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        this.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/common/DoubleClickEditText.java"
            line="61"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view ``DoubleClickEditText`` has `setOnTouchListener` called on it but does not override `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        this.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/common/DoubleClickEditText.java"
            line="70"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view ``DoubleClickEditText`` has `setOnTouchListener` called on it but does not override `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        this.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/common/DoubleClickEditText.java"
            line="79"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view ``DoubleTapEditTextColorPicker`` has `setOnTouchListener` called on it but does not override `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        this.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/common/DoubleTapEditTextColorPicker.java"
            line="47"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view ``DoubleTapEditTextColorPicker`` has `setOnTouchListener` called on it but does not override `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        this.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/common/DoubleTapEditTextColorPicker.java"
            line="55"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view ``DoubleTapEditTextColorPicker`` has `setOnTouchListener` called on it but does not override `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        this.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/common/DoubleTapEditTextColorPicker.java"
            line="63"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view ``DoubleTapEditTextColorPicker`` has `setOnTouchListener` called on it but does not override `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        this.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/common/DoubleTapEditTextColorPicker.java"
            line="71"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view `RingColorPickerOuterCircle` overrides `onTouchEvent` but not `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouchEvent(MotionEvent event) {"
        errorLine2="                   ~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/ringcolorpicker/RingColorPickerOuterCircle.java"
            line="173"
            column="20"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Warning"
        message="Custom view `SquareColorPicker` overrides `onTouchEvent` but not `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouchEvent(MotionEvent event) {"
        errorLine2="                   ~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/squarecolorpikcer/SquareColorPicker.java"
            line="148"
            column="20"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="            &lt;ImageView"
        errorLine2="             ~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_pallete_hsl_view.xml"
            line="32"
            column="14"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="            &lt;ImageView"
        errorLine2="             ~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_picker_tab_view.xml"
            line="24"
            column="14"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="            &lt;ImageView"
        errorLine2="             ~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_picker_tab_view.xml"
            line="58"
            column="14"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="            &lt;ImageView"
        errorLine2="             ~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_picker_tab_view.xml"
            line="170"
            column="14"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="            &lt;ImageView"
        errorLine2="             ~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_picker_tab_view.xml"
            line="188"
            column="14"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="            &lt;ImageView"
        errorLine2="             ~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_picker_tab_view.xml"
            line="206"
            column="14"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="            &lt;ImageView"
        errorLine2="             ~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/color_picker_tab_view.xml"
            line="224"
            column="14"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="                        &lt;ImageView"
        errorLine2="                         ~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/rv_color_palette_lits.xml"
            line="56"
            column="26"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="                        &lt;ImageView"
        errorLine2="                         ~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/rv_color_palette_lits.xml"
            line="64"
            column="26"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="                        &lt;ImageView"
        errorLine2="                         ~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/rv_color_palette_lits.xml"
            line="86"
            column="26"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="                        &lt;ImageView"
        errorLine2="                         ~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/rv_color_palette_lits.xml"
            line="106"
            column="26"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="                        &lt;ImageView"
        errorLine2="                         ~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/rv_color_palette_lits.xml"
            line="124"
            column="26"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="                        &lt;ImageView"
        errorLine2="                         ~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/rv_color_palette_lits.xml"
            line="142"
            column="26"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, set their descriptions to `@null`. If your app&apos;s minSdkVersion is 16 or higher, you can instead set these graphical elements&apos; `android:importantForAccessibility` attributes to `no`.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`."
        url="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        urls="https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases"
        errorLine1="    &lt;ImageView"
        errorLine2="     ~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/rv_item_color_palette.xml"
            line="11"
            column="6"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueH.setText(progress + &quot;&apos;&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="506"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueS.setText(progress + &quot;%&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="532"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueL.setText(progress + &quot;%&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="559"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueR.setText(&quot;&quot; + progress);"
        errorLine2="                                             ~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="588"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueH.setText(String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="593"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueS.setText(String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="596"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueL.setText(String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="599"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueG.setText(&quot;&quot; + progress);"
        errorLine2="                                             ~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="617"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueH.setText(String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="622"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueS.setText(String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="625"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueL.setText(String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="628"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueB.setText(&quot;&quot; + progress);"
        errorLine2="                                             ~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="646"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueH.setText(String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="651"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueS.setText(String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="654"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueL.setText(String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;);"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="657"
            column="46"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="        binding.tvValueH.setText(String.format(&quot;%.1f&quot;, hsvH) + &quot;&apos;&quot;);"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="702"
            column="34"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="        binding.tvValueS.setText(String.format(&quot;%.1f&quot;, hsvS) + &quot;%&quot;);"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="705"
            column="34"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="        binding.tvValueL.setText(String.format(&quot;%.1f&quot;, hsvL) + &quot;%&quot;);"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekBarsLinearColorPickerView.java"
            line="708"
            column="34"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueHMinimized.setText(progress + &quot;&apos;&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="532"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueSMinimized.setText(progress + &quot;%&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="558"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueLMinimized.setText(progress + &quot;%&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="585"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueRMinimized.setText(&quot;&quot; + progress);"
        errorLine2="                                                      ~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="614"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueHMinimized.setText(String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="619"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueSMinimized.setText(String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="622"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueLMinimized.setText(String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="625"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueGMinimized.setText(&quot;&quot; + progress);"
        errorLine2="                                                      ~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="643"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueHMinimized.setText(String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="648"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueSMinimized.setText(String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="651"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueLMinimized.setText(String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="654"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueBMinimized.setText(&quot;&quot; + progress);"
        errorLine2="                                                      ~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="672"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueHMinimized.setText(String.format(&quot;%.1f&quot;, colorH) + &quot;&apos;&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="677"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueSMinimized.setText(String.format(&quot;%.1f&quot;, colorS) + &quot;%&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="680"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="                    binding.tvValueLMinimized.setText(String.format(&quot;%.1f&quot;, colorL) + &quot;%&quot;);"
        errorLine2="                                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="683"
            column="55"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="        binding.tvValueHMinimized.setText(String.format(&quot;%.1f&quot;, hsvH) + &quot;&apos;&quot;);"
        errorLine2="                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="728"
            column="43"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="        binding.tvValueSMinimized.setText(String.format(&quot;%.1f&quot;, hsvS) + &quot;%&quot;);"
        errorLine2="                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="731"
            column="43"/>
    </issue>

    <issue
        id="SetTextI18n"
        severity="Warning"
        message="Do not concatenate text displayed with `setText`. Use resource string with placeholders."
        category="Internationalization"
        priority="6"
        summary="TextView Internationalization"
        explanation="When calling `TextView#setText`&#xA;* Never call `Number#toString()` to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using `String#format` with proper format specifications (`%d` or `%f`) instead.&#xA;* Do not pass a string literal (e.g. &quot;Hello&quot;) to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.&#xA;* Do not build messages by concatenating text chunks. Such messages can not be properly translated."
        url="https://developer.android.com/guide/topics/resources/localization.html"
        urls="https://developer.android.com/guide/topics/resources/localization.html"
        errorLine1="        binding.tvValueLMinimized.setText(String.format(&quot;%.1f&quot;, hsvL) + &quot;%&quot;);"
        errorLine2="                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/java/com/example/colorpickerlibs/utils/seekbarscolorpicker/SeekbarViewMinimized.java"
            line="734"
            column="43"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;H&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                            android:text=&quot;H&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="69"
            column="29"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;L&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                                android:text=&quot;L&quot;"
        errorLine2="                                ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="102"
            column="33"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;S&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                            android:text=&quot;S&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="125"
            column="29"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;L&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                                android:text=&quot;L&quot;"
        errorLine2="                                ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="157"
            column="33"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;L&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                            android:text=&quot;L&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="177"
            column="29"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;L&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                                android:text=&quot;L&quot;"
        errorLine2="                                ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="209"
            column="33"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;R&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                            android:text=&quot;R&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="229"
            column="29"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;L&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                                android:text=&quot;L&quot;"
        errorLine2="                                ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="261"
            column="33"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;G&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                            android:text=&quot;G&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="281"
            column="29"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;L&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                                android:text=&quot;L&quot;"
        errorLine2="                                ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="313"
            column="33"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;B&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                            android:text=&quot;B&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="333"
            column="29"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;L&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                                android:text=&quot;L&quot;"
        errorLine2="                                ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="366"
            column="33"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;#&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                        android:text=&quot;#&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="408"
            column="25"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;FFFFFF&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                        android:text=&quot;FFFFFF&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="424"
            column="25"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;HSL&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                                android:text=&quot;HSL&quot;"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="56"
            column="33"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;RGB&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                                android:text=&quot;RGB&quot;"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="87"
            column="33"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;H&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                        android:text=&quot;H&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="124"
            column="25"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;L&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                            android:text=&quot;L&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="157"
            column="29"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;S&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                        android:text=&quot;S&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="178"
            column="25"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;L&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                            android:text=&quot;L&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="210"
            column="29"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;L&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                        android:text=&quot;L&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="228"
            column="25"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;L&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                            android:text=&quot;L&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="260"
            column="29"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;R&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                        android:text=&quot;R&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="291"
            column="25"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;L&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                            android:text=&quot;L&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="323"
            column="29"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;G&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                        android:text=&quot;G&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="341"
            column="25"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;L&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                            android:text=&quot;L&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="373"
            column="29"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;B&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                        android:text=&quot;B&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="391"
            column="25"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;L&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                            android:text=&quot;L&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="423"
            column="29"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;#&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                            android:text=&quot;#&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="471"
            column="29"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;FFFFFF&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="                            android:text=&quot;FFFFFF&quot;"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker_minimize.xml"
            line="487"
            column="29"/>
    </issue>

    <issue
        id="RelativeOverlap"
        severity="Warning"
        message="`@id/paletteTitle` can overlap `LinearLayout-3` if @id/paletteTitle grows due to localized text expansion"
        category="Internationalization"
        priority="3"
        summary="Overlapping items in RelativeLayout"
        explanation="If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like `toEndOf`/`toStartOf`."
        errorLine1="                &lt;com.example.colorpickerlibs.utils.common.DoubleClickEditText"
        errorLine2="                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/rv_color_palette_lits.xml"
            line="29"
            column="18"/>
    </issue>

    <issue
        id="RelativeOverlap"
        severity="Warning"
        message="`TextView-1` can overlap `@id/etHexadecimalContainer` if @string/HEXA_DECIMAL grows due to localized text expansion"
        category="Internationalization"
        priority="3"
        summary="Overlapping items in RelativeLayout"
        explanation="If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like `toEndOf`/`toStartOf`."
        errorLine1="                &lt;TextView"
        errorLine2="                 ~~~~~~~~">
        <location
            file="/Users/prabodharanasinghe/Documents/My Android Projects Updated/colorpicker/colorpickerlibs/src/main/res/layout/seekbars_picker.xml"
            line="384"
            column="18"/>
    </issue>

</issues>
