// Generated by view binder compiler. Do not edit!
package com.example.colorpickerlibs.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.colorpickerlibs.R;
import com.example.colorpickerlibs.utils.common.DoubleClickEditText;
import com.example.colorpickerlibs.utils.common.DoubleTapEditTextColorPicker;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SeekbarsPickerMinimizeBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final LinearLayout HSLValueContainerMinimized;

  @NonNull
  public final LinearLayout RGBValueContainerMinimized;

  @NonNull
  public final RelativeLayout btnHSBMinimized;

  @NonNull
  public final RelativeLayout btnRGBMinimized;

  @NonNull
  public final TextView btnTextHSBMinimized;

  @NonNull
  public final TextView btnTextRGBMinimized;

  @NonNull
  public final LinearLayout etHexadecimalContainerMinimized;

  @NonNull
  public final DoubleClickEditText etHexadecimalMinimized;

  @NonNull
  public final RelativeLayout hexadecimalContainerMinimized;

  @NonNull
  public final SeekBar seekBarBMinimized;

  @NonNull
  public final SeekBar seekBarGMinimized;

  @NonNull
  public final SeekBar seekBarHMinimized;

  @NonNull
  public final SeekBar seekBarLMinimized;

  @NonNull
  public final SeekBar seekBarRMinimized;

  @NonNull
  public final SeekBar seekBarSMinimized;

  @NonNull
  public final TextView tvNameBMinimized;

  @NonNull
  public final TextView tvNameGMinimized;

  @NonNull
  public final TextView tvNameHMinimized;

  @NonNull
  public final TextView tvNameLMinimized;

  @NonNull
  public final TextView tvNameRMinimized;

  @NonNull
  public final TextView tvNameSMinimized;

  @NonNull
  public final LinearLayout tvValueBContainerMinimized;

  @NonNull
  public final DoubleTapEditTextColorPicker tvValueBMinimized;

  @NonNull
  public final LinearLayout tvValueGContainerMinimized;

  @NonNull
  public final DoubleTapEditTextColorPicker tvValueGMinimized;

  @NonNull
  public final LinearLayout tvValueHContainerMinimized;

  @NonNull
  public final DoubleTapEditTextColorPicker tvValueHMinimized;

  @NonNull
  public final LinearLayout tvValueLContainerMinimized;

  @NonNull
  public final DoubleTapEditTextColorPicker tvValueLMinimized;

  @NonNull
  public final LinearLayout tvValueRContainerMinimized;

  @NonNull
  public final DoubleTapEditTextColorPicker tvValueRMinimized;

  @NonNull
  public final LinearLayout tvValueSContainerMinimized;

  @NonNull
  public final DoubleTapEditTextColorPicker tvValueSMinimized;

  @NonNull
  public final CardView view3BtnContainerMinimized;

  @NonNull
  public final LinearLayout view3ContainerMinimized;

  @NonNull
  public final FrameLayout view3Minimized;

  private SeekbarsPickerMinimizeBinding(@NonNull FrameLayout rootView,
      @NonNull LinearLayout HSLValueContainerMinimized,
      @NonNull LinearLayout RGBValueContainerMinimized, @NonNull RelativeLayout btnHSBMinimized,
      @NonNull RelativeLayout btnRGBMinimized, @NonNull TextView btnTextHSBMinimized,
      @NonNull TextView btnTextRGBMinimized, @NonNull LinearLayout etHexadecimalContainerMinimized,
      @NonNull DoubleClickEditText etHexadecimalMinimized,
      @NonNull RelativeLayout hexadecimalContainerMinimized, @NonNull SeekBar seekBarBMinimized,
      @NonNull SeekBar seekBarGMinimized, @NonNull SeekBar seekBarHMinimized,
      @NonNull SeekBar seekBarLMinimized, @NonNull SeekBar seekBarRMinimized,
      @NonNull SeekBar seekBarSMinimized, @NonNull TextView tvNameBMinimized,
      @NonNull TextView tvNameGMinimized, @NonNull TextView tvNameHMinimized,
      @NonNull TextView tvNameLMinimized, @NonNull TextView tvNameRMinimized,
      @NonNull TextView tvNameSMinimized, @NonNull LinearLayout tvValueBContainerMinimized,
      @NonNull DoubleTapEditTextColorPicker tvValueBMinimized,
      @NonNull LinearLayout tvValueGContainerMinimized,
      @NonNull DoubleTapEditTextColorPicker tvValueGMinimized,
      @NonNull LinearLayout tvValueHContainerMinimized,
      @NonNull DoubleTapEditTextColorPicker tvValueHMinimized,
      @NonNull LinearLayout tvValueLContainerMinimized,
      @NonNull DoubleTapEditTextColorPicker tvValueLMinimized,
      @NonNull LinearLayout tvValueRContainerMinimized,
      @NonNull DoubleTapEditTextColorPicker tvValueRMinimized,
      @NonNull LinearLayout tvValueSContainerMinimized,
      @NonNull DoubleTapEditTextColorPicker tvValueSMinimized,
      @NonNull CardView view3BtnContainerMinimized, @NonNull LinearLayout view3ContainerMinimized,
      @NonNull FrameLayout view3Minimized) {
    this.rootView = rootView;
    this.HSLValueContainerMinimized = HSLValueContainerMinimized;
    this.RGBValueContainerMinimized = RGBValueContainerMinimized;
    this.btnHSBMinimized = btnHSBMinimized;
    this.btnRGBMinimized = btnRGBMinimized;
    this.btnTextHSBMinimized = btnTextHSBMinimized;
    this.btnTextRGBMinimized = btnTextRGBMinimized;
    this.etHexadecimalContainerMinimized = etHexadecimalContainerMinimized;
    this.etHexadecimalMinimized = etHexadecimalMinimized;
    this.hexadecimalContainerMinimized = hexadecimalContainerMinimized;
    this.seekBarBMinimized = seekBarBMinimized;
    this.seekBarGMinimized = seekBarGMinimized;
    this.seekBarHMinimized = seekBarHMinimized;
    this.seekBarLMinimized = seekBarLMinimized;
    this.seekBarRMinimized = seekBarRMinimized;
    this.seekBarSMinimized = seekBarSMinimized;
    this.tvNameBMinimized = tvNameBMinimized;
    this.tvNameGMinimized = tvNameGMinimized;
    this.tvNameHMinimized = tvNameHMinimized;
    this.tvNameLMinimized = tvNameLMinimized;
    this.tvNameRMinimized = tvNameRMinimized;
    this.tvNameSMinimized = tvNameSMinimized;
    this.tvValueBContainerMinimized = tvValueBContainerMinimized;
    this.tvValueBMinimized = tvValueBMinimized;
    this.tvValueGContainerMinimized = tvValueGContainerMinimized;
    this.tvValueGMinimized = tvValueGMinimized;
    this.tvValueHContainerMinimized = tvValueHContainerMinimized;
    this.tvValueHMinimized = tvValueHMinimized;
    this.tvValueLContainerMinimized = tvValueLContainerMinimized;
    this.tvValueLMinimized = tvValueLMinimized;
    this.tvValueRContainerMinimized = tvValueRContainerMinimized;
    this.tvValueRMinimized = tvValueRMinimized;
    this.tvValueSContainerMinimized = tvValueSContainerMinimized;
    this.tvValueSMinimized = tvValueSMinimized;
    this.view3BtnContainerMinimized = view3BtnContainerMinimized;
    this.view3ContainerMinimized = view3ContainerMinimized;
    this.view3Minimized = view3Minimized;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SeekbarsPickerMinimizeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SeekbarsPickerMinimizeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.seekbars_picker_minimize, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SeekbarsPickerMinimizeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.HSLValueContainerMinimized;
      LinearLayout HSLValueContainerMinimized = ViewBindings.findChildViewById(rootView, id);
      if (HSLValueContainerMinimized == null) {
        break missingId;
      }

      id = R.id.RGBValueContainerMinimized;
      LinearLayout RGBValueContainerMinimized = ViewBindings.findChildViewById(rootView, id);
      if (RGBValueContainerMinimized == null) {
        break missingId;
      }

      id = R.id.btnHSBMinimized;
      RelativeLayout btnHSBMinimized = ViewBindings.findChildViewById(rootView, id);
      if (btnHSBMinimized == null) {
        break missingId;
      }

      id = R.id.btnRGBMinimized;
      RelativeLayout btnRGBMinimized = ViewBindings.findChildViewById(rootView, id);
      if (btnRGBMinimized == null) {
        break missingId;
      }

      id = R.id.btnTextHSBMinimized;
      TextView btnTextHSBMinimized = ViewBindings.findChildViewById(rootView, id);
      if (btnTextHSBMinimized == null) {
        break missingId;
      }

      id = R.id.btnTextRGBMinimized;
      TextView btnTextRGBMinimized = ViewBindings.findChildViewById(rootView, id);
      if (btnTextRGBMinimized == null) {
        break missingId;
      }

      id = R.id.etHexadecimalContainerMinimized;
      LinearLayout etHexadecimalContainerMinimized = ViewBindings.findChildViewById(rootView, id);
      if (etHexadecimalContainerMinimized == null) {
        break missingId;
      }

      id = R.id.etHexadecimalMinimized;
      DoubleClickEditText etHexadecimalMinimized = ViewBindings.findChildViewById(rootView, id);
      if (etHexadecimalMinimized == null) {
        break missingId;
      }

      id = R.id.hexadecimalContainerMinimized;
      RelativeLayout hexadecimalContainerMinimized = ViewBindings.findChildViewById(rootView, id);
      if (hexadecimalContainerMinimized == null) {
        break missingId;
      }

      id = R.id.seekBarBMinimized;
      SeekBar seekBarBMinimized = ViewBindings.findChildViewById(rootView, id);
      if (seekBarBMinimized == null) {
        break missingId;
      }

      id = R.id.seekBarGMinimized;
      SeekBar seekBarGMinimized = ViewBindings.findChildViewById(rootView, id);
      if (seekBarGMinimized == null) {
        break missingId;
      }

      id = R.id.seekBarHMinimized;
      SeekBar seekBarHMinimized = ViewBindings.findChildViewById(rootView, id);
      if (seekBarHMinimized == null) {
        break missingId;
      }

      id = R.id.seekBarLMinimized;
      SeekBar seekBarLMinimized = ViewBindings.findChildViewById(rootView, id);
      if (seekBarLMinimized == null) {
        break missingId;
      }

      id = R.id.seekBarRMinimized;
      SeekBar seekBarRMinimized = ViewBindings.findChildViewById(rootView, id);
      if (seekBarRMinimized == null) {
        break missingId;
      }

      id = R.id.seekBarSMinimized;
      SeekBar seekBarSMinimized = ViewBindings.findChildViewById(rootView, id);
      if (seekBarSMinimized == null) {
        break missingId;
      }

      id = R.id.tvNameBMinimized;
      TextView tvNameBMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvNameBMinimized == null) {
        break missingId;
      }

      id = R.id.tvNameGMinimized;
      TextView tvNameGMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvNameGMinimized == null) {
        break missingId;
      }

      id = R.id.tvNameHMinimized;
      TextView tvNameHMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvNameHMinimized == null) {
        break missingId;
      }

      id = R.id.tvNameLMinimized;
      TextView tvNameLMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvNameLMinimized == null) {
        break missingId;
      }

      id = R.id.tvNameRMinimized;
      TextView tvNameRMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvNameRMinimized == null) {
        break missingId;
      }

      id = R.id.tvNameSMinimized;
      TextView tvNameSMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvNameSMinimized == null) {
        break missingId;
      }

      id = R.id.tvValueBContainerMinimized;
      LinearLayout tvValueBContainerMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvValueBContainerMinimized == null) {
        break missingId;
      }

      id = R.id.tvValueBMinimized;
      DoubleTapEditTextColorPicker tvValueBMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvValueBMinimized == null) {
        break missingId;
      }

      id = R.id.tvValueGContainerMinimized;
      LinearLayout tvValueGContainerMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvValueGContainerMinimized == null) {
        break missingId;
      }

      id = R.id.tvValueGMinimized;
      DoubleTapEditTextColorPicker tvValueGMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvValueGMinimized == null) {
        break missingId;
      }

      id = R.id.tvValueHContainerMinimized;
      LinearLayout tvValueHContainerMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvValueHContainerMinimized == null) {
        break missingId;
      }

      id = R.id.tvValueHMinimized;
      DoubleTapEditTextColorPicker tvValueHMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvValueHMinimized == null) {
        break missingId;
      }

      id = R.id.tvValueLContainerMinimized;
      LinearLayout tvValueLContainerMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvValueLContainerMinimized == null) {
        break missingId;
      }

      id = R.id.tvValueLMinimized;
      DoubleTapEditTextColorPicker tvValueLMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvValueLMinimized == null) {
        break missingId;
      }

      id = R.id.tvValueRContainerMinimized;
      LinearLayout tvValueRContainerMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvValueRContainerMinimized == null) {
        break missingId;
      }

      id = R.id.tvValueRMinimized;
      DoubleTapEditTextColorPicker tvValueRMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvValueRMinimized == null) {
        break missingId;
      }

      id = R.id.tvValueSContainerMinimized;
      LinearLayout tvValueSContainerMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvValueSContainerMinimized == null) {
        break missingId;
      }

      id = R.id.tvValueSMinimized;
      DoubleTapEditTextColorPicker tvValueSMinimized = ViewBindings.findChildViewById(rootView, id);
      if (tvValueSMinimized == null) {
        break missingId;
      }

      id = R.id.view3BtnContainerMinimized;
      CardView view3BtnContainerMinimized = ViewBindings.findChildViewById(rootView, id);
      if (view3BtnContainerMinimized == null) {
        break missingId;
      }

      id = R.id.view3ContainerMinimized;
      LinearLayout view3ContainerMinimized = ViewBindings.findChildViewById(rootView, id);
      if (view3ContainerMinimized == null) {
        break missingId;
      }

      id = R.id.view3Minimized;
      FrameLayout view3Minimized = ViewBindings.findChildViewById(rootView, id);
      if (view3Minimized == null) {
        break missingId;
      }

      return new SeekbarsPickerMinimizeBinding((FrameLayout) rootView, HSLValueContainerMinimized,
          RGBValueContainerMinimized, btnHSBMinimized, btnRGBMinimized, btnTextHSBMinimized,
          btnTextRGBMinimized, etHexadecimalContainerMinimized, etHexadecimalMinimized,
          hexadecimalContainerMinimized, seekBarBMinimized, seekBarGMinimized, seekBarHMinimized,
          seekBarLMinimized, seekBarRMinimized, seekBarSMinimized, tvNameBMinimized,
          tvNameGMinimized, tvNameHMinimized, tvNameLMinimized, tvNameRMinimized, tvNameSMinimized,
          tvValueBContainerMinimized, tvValueBMinimized, tvValueGContainerMinimized,
          tvValueGMinimized, tvValueHContainerMinimized, tvValueHMinimized,
          tvValueLContainerMinimized, tvValueLMinimized, tvValueRContainerMinimized,
          tvValueRMinimized, tvValueSContainerMinimized, tvValueSMinimized,
          view3BtnContainerMinimized, view3ContainerMinimized, view3Minimized);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
