// Generated by view binder compiler. Do not edit!
package com.example.colorpickerlibs.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.colorpickerlibs.R;
import com.example.colorpickerlibs.utils.defaultpallets.DefaultPalletsView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ColorPickerTabViewBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final RelativeLayout addPallet;

  @NonNull
  public final LinearLayout bottomActionBar;

  @NonNull
  public final RelativeLayout btnClose;

  @NonNull
  public final RelativeLayout btnLinerColorPicker;

  @NonNull
  public final RelativeLayout btnPalettes;

  @NonNull
  public final RelativeLayout btnRingColorPicker;

  @NonNull
  public final RelativeLayout btnSquareColorPicker;

  @NonNull
  public final DefaultPalletsView defaultPalletViewContainer;

  @NonNull
  public final RelativeLayout draggable;

  @NonNull
  public final View draggableView;

  @NonNull
  public final ImageView imgClose;

  @NonNull
  public final ImageView imgLinerColorPicker;

  @NonNull
  public final ImageView imgPalettes;

  @NonNull
  public final ImageView imgRingColorPicker;

  @NonNull
  public final ImageView imgSquareColorPicker;

  @NonNull
  public final RelativeLayout lastSelectedColor;

  @NonNull
  public final RelativeLayout linearColorPickerContainer;

  @NonNull
  public final LinearColorPickerViewBinding linearColorPickerView;

  @NonNull
  public final LinearLayout mainContainer;

  @NonNull
  public final RelativeLayout middleContainer;

  @NonNull
  public final RelativeLayout previousSelectedColor;

  @NonNull
  public final RingColorPickerViewBinding ringColorPickerView;

  @NonNull
  public final RelativeLayout ringColorPickerViewContainer;

  @NonNull
  public final CardView selectedColorContainer;

  @NonNull
  public final SquareColorPickerViewBinding squareColorPickerView;

  @NonNull
  public final RelativeLayout squareColorPickerViewContainer;

  @NonNull
  public final RelativeLayout topTool;

  private ColorPickerTabViewBinding(@NonNull LinearLayout rootView,
      @NonNull RelativeLayout addPallet, @NonNull LinearLayout bottomActionBar,
      @NonNull RelativeLayout btnClose, @NonNull RelativeLayout btnLinerColorPicker,
      @NonNull RelativeLayout btnPalettes, @NonNull RelativeLayout btnRingColorPicker,
      @NonNull RelativeLayout btnSquareColorPicker,
      @NonNull DefaultPalletsView defaultPalletViewContainer, @NonNull RelativeLayout draggable,
      @NonNull View draggableView, @NonNull ImageView imgClose,
      @NonNull ImageView imgLinerColorPicker, @NonNull ImageView imgPalettes,
      @NonNull ImageView imgRingColorPicker, @NonNull ImageView imgSquareColorPicker,
      @NonNull RelativeLayout lastSelectedColor, @NonNull RelativeLayout linearColorPickerContainer,
      @NonNull LinearColorPickerViewBinding linearColorPickerView,
      @NonNull LinearLayout mainContainer, @NonNull RelativeLayout middleContainer,
      @NonNull RelativeLayout previousSelectedColor,
      @NonNull RingColorPickerViewBinding ringColorPickerView,
      @NonNull RelativeLayout ringColorPickerViewContainer,
      @NonNull CardView selectedColorContainer,
      @NonNull SquareColorPickerViewBinding squareColorPickerView,
      @NonNull RelativeLayout squareColorPickerViewContainer, @NonNull RelativeLayout topTool) {
    this.rootView = rootView;
    this.addPallet = addPallet;
    this.bottomActionBar = bottomActionBar;
    this.btnClose = btnClose;
    this.btnLinerColorPicker = btnLinerColorPicker;
    this.btnPalettes = btnPalettes;
    this.btnRingColorPicker = btnRingColorPicker;
    this.btnSquareColorPicker = btnSquareColorPicker;
    this.defaultPalletViewContainer = defaultPalletViewContainer;
    this.draggable = draggable;
    this.draggableView = draggableView;
    this.imgClose = imgClose;
    this.imgLinerColorPicker = imgLinerColorPicker;
    this.imgPalettes = imgPalettes;
    this.imgRingColorPicker = imgRingColorPicker;
    this.imgSquareColorPicker = imgSquareColorPicker;
    this.lastSelectedColor = lastSelectedColor;
    this.linearColorPickerContainer = linearColorPickerContainer;
    this.linearColorPickerView = linearColorPickerView;
    this.mainContainer = mainContainer;
    this.middleContainer = middleContainer;
    this.previousSelectedColor = previousSelectedColor;
    this.ringColorPickerView = ringColorPickerView;
    this.ringColorPickerViewContainer = ringColorPickerViewContainer;
    this.selectedColorContainer = selectedColorContainer;
    this.squareColorPickerView = squareColorPickerView;
    this.squareColorPickerViewContainer = squareColorPickerViewContainer;
    this.topTool = topTool;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ColorPickerTabViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ColorPickerTabViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.color_picker_tab_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ColorPickerTabViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addPallet;
      RelativeLayout addPallet = ViewBindings.findChildViewById(rootView, id);
      if (addPallet == null) {
        break missingId;
      }

      id = R.id.bottomActionBar;
      LinearLayout bottomActionBar = ViewBindings.findChildViewById(rootView, id);
      if (bottomActionBar == null) {
        break missingId;
      }

      id = R.id.btnClose;
      RelativeLayout btnClose = ViewBindings.findChildViewById(rootView, id);
      if (btnClose == null) {
        break missingId;
      }

      id = R.id.btnLinerColorPicker;
      RelativeLayout btnLinerColorPicker = ViewBindings.findChildViewById(rootView, id);
      if (btnLinerColorPicker == null) {
        break missingId;
      }

      id = R.id.btnPalettes;
      RelativeLayout btnPalettes = ViewBindings.findChildViewById(rootView, id);
      if (btnPalettes == null) {
        break missingId;
      }

      id = R.id.btnRingColorPicker;
      RelativeLayout btnRingColorPicker = ViewBindings.findChildViewById(rootView, id);
      if (btnRingColorPicker == null) {
        break missingId;
      }

      id = R.id.btnSquareColorPicker;
      RelativeLayout btnSquareColorPicker = ViewBindings.findChildViewById(rootView, id);
      if (btnSquareColorPicker == null) {
        break missingId;
      }

      id = R.id.defaultPalletViewContainer;
      DefaultPalletsView defaultPalletViewContainer = ViewBindings.findChildViewById(rootView, id);
      if (defaultPalletViewContainer == null) {
        break missingId;
      }

      id = R.id.draggable;
      RelativeLayout draggable = ViewBindings.findChildViewById(rootView, id);
      if (draggable == null) {
        break missingId;
      }

      id = R.id.draggable_view;
      View draggableView = ViewBindings.findChildViewById(rootView, id);
      if (draggableView == null) {
        break missingId;
      }

      id = R.id.imgClose;
      ImageView imgClose = ViewBindings.findChildViewById(rootView, id);
      if (imgClose == null) {
        break missingId;
      }

      id = R.id.imgLinerColorPicker;
      ImageView imgLinerColorPicker = ViewBindings.findChildViewById(rootView, id);
      if (imgLinerColorPicker == null) {
        break missingId;
      }

      id = R.id.imgPalettes;
      ImageView imgPalettes = ViewBindings.findChildViewById(rootView, id);
      if (imgPalettes == null) {
        break missingId;
      }

      id = R.id.imgRingColorPicker;
      ImageView imgRingColorPicker = ViewBindings.findChildViewById(rootView, id);
      if (imgRingColorPicker == null) {
        break missingId;
      }

      id = R.id.imgSquareColorPicker;
      ImageView imgSquareColorPicker = ViewBindings.findChildViewById(rootView, id);
      if (imgSquareColorPicker == null) {
        break missingId;
      }

      id = R.id.lastSelectedColor;
      RelativeLayout lastSelectedColor = ViewBindings.findChildViewById(rootView, id);
      if (lastSelectedColor == null) {
        break missingId;
      }

      id = R.id.linearColorPickerContainer;
      RelativeLayout linearColorPickerContainer = ViewBindings.findChildViewById(rootView, id);
      if (linearColorPickerContainer == null) {
        break missingId;
      }

      id = R.id.linearColorPickerView;
      View linearColorPickerView = ViewBindings.findChildViewById(rootView, id);
      if (linearColorPickerView == null) {
        break missingId;
      }
      LinearColorPickerViewBinding binding_linearColorPickerView = LinearColorPickerViewBinding.bind(linearColorPickerView);

      LinearLayout mainContainer = (LinearLayout) rootView;

      id = R.id.middleContainer;
      RelativeLayout middleContainer = ViewBindings.findChildViewById(rootView, id);
      if (middleContainer == null) {
        break missingId;
      }

      id = R.id.previousSelectedColor;
      RelativeLayout previousSelectedColor = ViewBindings.findChildViewById(rootView, id);
      if (previousSelectedColor == null) {
        break missingId;
      }

      id = R.id.ringColorPickerView;
      View ringColorPickerView = ViewBindings.findChildViewById(rootView, id);
      if (ringColorPickerView == null) {
        break missingId;
      }
      RingColorPickerViewBinding binding_ringColorPickerView = RingColorPickerViewBinding.bind(ringColorPickerView);

      id = R.id.ringColorPickerViewContainer;
      RelativeLayout ringColorPickerViewContainer = ViewBindings.findChildViewById(rootView, id);
      if (ringColorPickerViewContainer == null) {
        break missingId;
      }

      id = R.id.selectedColorContainer;
      CardView selectedColorContainer = ViewBindings.findChildViewById(rootView, id);
      if (selectedColorContainer == null) {
        break missingId;
      }

      id = R.id.squareColorPickerView;
      View squareColorPickerView = ViewBindings.findChildViewById(rootView, id);
      if (squareColorPickerView == null) {
        break missingId;
      }
      SquareColorPickerViewBinding binding_squareColorPickerView = SquareColorPickerViewBinding.bind(squareColorPickerView);

      id = R.id.squareColorPickerViewContainer;
      RelativeLayout squareColorPickerViewContainer = ViewBindings.findChildViewById(rootView, id);
      if (squareColorPickerViewContainer == null) {
        break missingId;
      }

      id = R.id.topTool;
      RelativeLayout topTool = ViewBindings.findChildViewById(rootView, id);
      if (topTool == null) {
        break missingId;
      }

      return new ColorPickerTabViewBinding((LinearLayout) rootView, addPallet, bottomActionBar,
          btnClose, btnLinerColorPicker, btnPalettes, btnRingColorPicker, btnSquareColorPicker,
          defaultPalletViewContainer, draggable, draggableView, imgClose, imgLinerColorPicker,
          imgPalettes, imgRingColorPicker, imgSquareColorPicker, lastSelectedColor,
          linearColorPickerContainer, binding_linearColorPickerView, mainContainer, middleContainer,
          previousSelectedColor, binding_ringColorPickerView, ringColorPickerViewContainer,
          selectedColorContainer, binding_squareColorPickerView, squareColorPickerViewContainer,
          topTool);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
