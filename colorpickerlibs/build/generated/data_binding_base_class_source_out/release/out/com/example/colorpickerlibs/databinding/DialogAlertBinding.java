// Generated by view binder compiler. Do not edit!
package com.example.colorpickerlibs.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.colorpickerlibs.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogAlertBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final MaterialCardView btn1;

  @NonNull
  public final RelativeLayout btn1Parent;

  @NonNull
  public final TextView btn1Text;

  @NonNull
  public final MaterialCardView btn2;

  @NonNull
  public final RelativeLayout btn2Parent;

  @NonNull
  public final TextView btn2Text;

  @NonNull
  public final LinearLayout buttonLinearLayout;

  @NonNull
  public final MaterialCardView dialogContainer;

  @NonNull
  public final LinearLayout dialogContainerLinearLayout;

  @NonNull
  public final TextView message;

  @NonNull
  public final TextView title;

  private DialogAlertBinding(@NonNull RelativeLayout rootView, @NonNull MaterialCardView btn1,
      @NonNull RelativeLayout btn1Parent, @NonNull TextView btn1Text,
      @NonNull MaterialCardView btn2, @NonNull RelativeLayout btn2Parent,
      @NonNull TextView btn2Text, @NonNull LinearLayout buttonLinearLayout,
      @NonNull MaterialCardView dialogContainer, @NonNull LinearLayout dialogContainerLinearLayout,
      @NonNull TextView message, @NonNull TextView title) {
    this.rootView = rootView;
    this.btn1 = btn1;
    this.btn1Parent = btn1Parent;
    this.btn1Text = btn1Text;
    this.btn2 = btn2;
    this.btn2Parent = btn2Parent;
    this.btn2Text = btn2Text;
    this.buttonLinearLayout = buttonLinearLayout;
    this.dialogContainer = dialogContainer;
    this.dialogContainerLinearLayout = dialogContainerLinearLayout;
    this.message = message;
    this.title = title;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogAlertBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogAlertBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_alert, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogAlertBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn1;
      MaterialCardView btn1 = ViewBindings.findChildViewById(rootView, id);
      if (btn1 == null) {
        break missingId;
      }

      id = R.id.btn1Parent;
      RelativeLayout btn1Parent = ViewBindings.findChildViewById(rootView, id);
      if (btn1Parent == null) {
        break missingId;
      }

      id = R.id.btn1Text;
      TextView btn1Text = ViewBindings.findChildViewById(rootView, id);
      if (btn1Text == null) {
        break missingId;
      }

      id = R.id.btn2;
      MaterialCardView btn2 = ViewBindings.findChildViewById(rootView, id);
      if (btn2 == null) {
        break missingId;
      }

      id = R.id.btn2Parent;
      RelativeLayout btn2Parent = ViewBindings.findChildViewById(rootView, id);
      if (btn2Parent == null) {
        break missingId;
      }

      id = R.id.btn2Text;
      TextView btn2Text = ViewBindings.findChildViewById(rootView, id);
      if (btn2Text == null) {
        break missingId;
      }

      id = R.id.buttonLinearLayout;
      LinearLayout buttonLinearLayout = ViewBindings.findChildViewById(rootView, id);
      if (buttonLinearLayout == null) {
        break missingId;
      }

      id = R.id.dialog_container;
      MaterialCardView dialogContainer = ViewBindings.findChildViewById(rootView, id);
      if (dialogContainer == null) {
        break missingId;
      }

      id = R.id.dialog_container_linear_layout;
      LinearLayout dialogContainerLinearLayout = ViewBindings.findChildViewById(rootView, id);
      if (dialogContainerLinearLayout == null) {
        break missingId;
      }

      id = R.id.message;
      TextView message = ViewBindings.findChildViewById(rootView, id);
      if (message == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      return new DialogAlertBinding((RelativeLayout) rootView, btn1, btn1Parent, btn1Text, btn2,
          btn2Parent, btn2Text, buttonLinearLayout, dialogContainer, dialogContainerLinearLayout,
          message, title);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
