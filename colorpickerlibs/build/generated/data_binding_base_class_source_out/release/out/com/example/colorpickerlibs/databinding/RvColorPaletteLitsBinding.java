// Generated by view binder compiler. Do not edit!
package com.example.colorpickerlibs.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.colorpickerlibs.R;
import com.example.colorpickerlibs.utils.common.DoubleClickEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RvColorPaletteLitsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CardView btnDefault;

  @NonNull
  public final CardView btnDelete;

  @NonNull
  public final CardView btnDeleteClose;

  @NonNull
  public final CardView btnSetDefault;

  @NonNull
  public final RelativeLayout btnSync;

  @NonNull
  public final ImageView imSync;

  @NonNull
  public final ImageView imSynced;

  @NonNull
  public final ImageView imgDefault;

  @NonNull
  public final ImageView imgDelete;

  @NonNull
  public final ImageView imgDeleteClose;

  @NonNull
  public final ImageView imgSetDefault;

  @NonNull
  public final DoubleClickEditText paletteTitle;

  @NonNull
  public final RecyclerView rvCPInsideList;

  @NonNull
  public final RelativeLayout rvContainerInsideList;

  @NonNull
  public final LinearLayout rvItemContainer;

  @NonNull
  public final RelativeLayout rvListDetailsContainer;

  private RvColorPaletteLitsBinding(@NonNull LinearLayout rootView, @NonNull CardView btnDefault,
      @NonNull CardView btnDelete, @NonNull CardView btnDeleteClose,
      @NonNull CardView btnSetDefault, @NonNull RelativeLayout btnSync, @NonNull ImageView imSync,
      @NonNull ImageView imSynced, @NonNull ImageView imgDefault, @NonNull ImageView imgDelete,
      @NonNull ImageView imgDeleteClose, @NonNull ImageView imgSetDefault,
      @NonNull DoubleClickEditText paletteTitle, @NonNull RecyclerView rvCPInsideList,
      @NonNull RelativeLayout rvContainerInsideList, @NonNull LinearLayout rvItemContainer,
      @NonNull RelativeLayout rvListDetailsContainer) {
    this.rootView = rootView;
    this.btnDefault = btnDefault;
    this.btnDelete = btnDelete;
    this.btnDeleteClose = btnDeleteClose;
    this.btnSetDefault = btnSetDefault;
    this.btnSync = btnSync;
    this.imSync = imSync;
    this.imSynced = imSynced;
    this.imgDefault = imgDefault;
    this.imgDelete = imgDelete;
    this.imgDeleteClose = imgDeleteClose;
    this.imgSetDefault = imgSetDefault;
    this.paletteTitle = paletteTitle;
    this.rvCPInsideList = rvCPInsideList;
    this.rvContainerInsideList = rvContainerInsideList;
    this.rvItemContainer = rvItemContainer;
    this.rvListDetailsContainer = rvListDetailsContainer;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RvColorPaletteLitsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RvColorPaletteLitsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.rv_color_palette_lits, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RvColorPaletteLitsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnDefault;
      CardView btnDefault = ViewBindings.findChildViewById(rootView, id);
      if (btnDefault == null) {
        break missingId;
      }

      id = R.id.btnDelete;
      CardView btnDelete = ViewBindings.findChildViewById(rootView, id);
      if (btnDelete == null) {
        break missingId;
      }

      id = R.id.btnDeleteClose;
      CardView btnDeleteClose = ViewBindings.findChildViewById(rootView, id);
      if (btnDeleteClose == null) {
        break missingId;
      }

      id = R.id.btnSetDefault;
      CardView btnSetDefault = ViewBindings.findChildViewById(rootView, id);
      if (btnSetDefault == null) {
        break missingId;
      }

      id = R.id.btnSync;
      RelativeLayout btnSync = ViewBindings.findChildViewById(rootView, id);
      if (btnSync == null) {
        break missingId;
      }

      id = R.id.imSync;
      ImageView imSync = ViewBindings.findChildViewById(rootView, id);
      if (imSync == null) {
        break missingId;
      }

      id = R.id.imSynced;
      ImageView imSynced = ViewBindings.findChildViewById(rootView, id);
      if (imSynced == null) {
        break missingId;
      }

      id = R.id.imgDefault;
      ImageView imgDefault = ViewBindings.findChildViewById(rootView, id);
      if (imgDefault == null) {
        break missingId;
      }

      id = R.id.imgDelete;
      ImageView imgDelete = ViewBindings.findChildViewById(rootView, id);
      if (imgDelete == null) {
        break missingId;
      }

      id = R.id.imgDeleteClose;
      ImageView imgDeleteClose = ViewBindings.findChildViewById(rootView, id);
      if (imgDeleteClose == null) {
        break missingId;
      }

      id = R.id.imgSetDefault;
      ImageView imgSetDefault = ViewBindings.findChildViewById(rootView, id);
      if (imgSetDefault == null) {
        break missingId;
      }

      id = R.id.paletteTitle;
      DoubleClickEditText paletteTitle = ViewBindings.findChildViewById(rootView, id);
      if (paletteTitle == null) {
        break missingId;
      }

      id = R.id.rvCPInsideList;
      RecyclerView rvCPInsideList = ViewBindings.findChildViewById(rootView, id);
      if (rvCPInsideList == null) {
        break missingId;
      }

      id = R.id.rvContainerInsideList;
      RelativeLayout rvContainerInsideList = ViewBindings.findChildViewById(rootView, id);
      if (rvContainerInsideList == null) {
        break missingId;
      }

      LinearLayout rvItemContainer = (LinearLayout) rootView;

      id = R.id.rvListDetailsContainer;
      RelativeLayout rvListDetailsContainer = ViewBindings.findChildViewById(rootView, id);
      if (rvListDetailsContainer == null) {
        break missingId;
      }

      return new RvColorPaletteLitsBinding((LinearLayout) rootView, btnDefault, btnDelete,
          btnDeleteClose, btnSetDefault, btnSync, imSync, imSynced, imgDefault, imgDelete,
          imgDeleteClose, imgSetDefault, paletteTitle, rvCPInsideList, rvContainerInsideList,
          rvItemContainer, rvListDetailsContainer);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
